name: Summarize Executive Orders

on:
  # Run after the scraper workflow completes successfully
  workflow_run:
    workflows: ["Executive Orders Scraper"]
    types:
      - completed
  
  # Allow manual triggering for testing
  workflow_dispatch:

jobs:
  summarize:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # For committing changes
      issues: write    # For creating issues
    # Only run if the scraper workflow succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper git operations
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas anthropic
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Summarize executive orders
        id: summarize
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Create output directory if it doesn't exist
          mkdir -p output
          
          # Save the output of the summarizer script to a log file
          python src/scripts/executive_order_summarizer_v2.py \
            --input data/presidential_actions_with_content.csv \
            --previous public/executive_orders_summarized.csv \
            --api-key "$ANTHROPIC_API_KEY" \
            --output-dir output > summarizer_output.log 2>&1
          
          # Check if the script was successful
          if [ $? -ne 0 ]; then
            cat summarizer_output.log
            echo "Summarizer script failed"
            exit 1
          fi
          
          # Display the output
          cat summarizer_output.log
          
          # Check if any new EOs were found
          if grep -q "Found.*new executive orders to process" summarizer_output.log; then
            # Extract the count of new EOs
            NEW_EO_COUNT=$(grep "Found.*new executive orders to process" summarizer_output.log | head -n 1 | grep -o "[0-9]*")
            
            # Verify that we have a number
            if [ -n "$NEW_EO_COUNT" ] && [ "$NEW_EO_COUNT" -gt 0 ]; then
              echo "NEW_EO_COUNT=$NEW_EO_COUNT" >> $GITHUB_ENV
              echo "HAS_NEW_EOS=true" >> $GITHUB_ENV
              echo "Found $NEW_EO_COUNT new executive orders"
            else
              echo "HAS_NEW_EOS=false" >> $GITHUB_ENV
              echo "NEW_EO_COUNT=0" >> $GITHUB_ENV
              echo "No new executive orders found"
            fi
          else
            echo "HAS_NEW_EOS=false" >> $GITHUB_ENV
            echo "NEW_EO_COUNT=0" >> $GITHUB_ENV
            echo "No new executive orders found"
          fi
      
      - name: Copy latest output to public directory
        run: |
          # Find the most recent file in the output directory
          LATEST_FILE=$(ls -t output/executive_orders_summarized_*.csv | head -1)
          
          if [ -n "$LATEST_FILE" ]; then
            # Copy to public directory with a fixed name
            cp "$LATEST_FILE" public/executive_orders_summarized.csv
            echo "Copied $LATEST_FILE to public/executive_orders_summarized.csv"
            echo "LATEST_OUTPUT_FILE=$LATEST_FILE" >> $GITHUB_ENV
          else
            echo "No output file found"
            exit 1
          fi
      
      - name: Extract new executive orders data
        if: env.HAS_NEW_EOS == 'true'
        run: |
          # Create a script to extract the new EOs
          cat > extract_new_eos.py << 'EOF'
          import pandas as pd
          import json
          import os
          import sys
          
          # Get the file paths from environment variables
          current_file = os.environ.get('LATEST_OUTPUT_FILE')
          previous_file = 'public/executive_orders_summarized.csv'
          new_eo_count = int(os.environ.get('NEW_EO_COUNT', 0))
          
          print(f"Extracting data from {current_file}")
          print(f"Expected new EO count: {new_eo_count}")
          
          # Read the files
          current_df = pd.read_csv(current_file)
          
          # Sort by date (newest first) to get the most recent EOs
          if 'date' in current_df.columns:
              try:
                  # Try to convert to datetime for proper sorting
                  current_df['date_temp'] = pd.to_datetime(current_df['date'], errors='coerce')
                  current_df = current_df.sort_values('date_temp', ascending=False)
                  current_df = current_df.drop('date_temp', axis=1)
              except Exception as e:
                  print(f"Error sorting by date: {e}")
          
          # Take the top N entries based on NEW_EO_COUNT
          new_entries = current_df.head(new_eo_count)
          print(f"Selected {len(new_entries)} entries")
          
          # Format for notification
          notification = {"new_eos": []}
          for _, row in new_entries.iterrows():
              entry = {
                  "title": row['title'],
                  "date": row['date'],
                  "summary": row['summary'] if 'summary' in row else "No summary available"
              }
              notification["new_eos"].append(entry)
          
          # Save to file
          with open('new_eos.json', 'w') as f:
              json.dump(notification, f)
          
          print(f"Extracted {len(new_entries)} new executive orders")
          EOF
          
          # Run the script
          python extract_new_eos.py
      
      - name: Create GitHub Issue for new executive orders
        if: env.HAS_NEW_EOS == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            try {
              // Read the notification data
              const notificationData = JSON.parse(fs.readFileSync('new_eos.json', 'utf8'));
              const newEoCount = process.env.NEW_EO_COUNT;
              
              // Create issue title
              const issueTitle = `🚨 New Executive Order${newEoCount > 1 ? 's' : ''} Detected (${newEoCount})`;
              
              // Create issue body
              let issueBody = `## ${newEoCount} new Executive Order${newEoCount > 1 ? 's' : ''} detected and summarized\n\n`;
              
              // Add each EO to the body
              notificationData.new_eos.forEach((eo, index) => {
                issueBody += `### ${index + 1}. ${eo.title}\n`;
                issueBody += `**Date:** ${eo.date}\n\n`;
                issueBody += `**Summary:**\n${eo.summary}\n\n`;
                issueBody += `---\n\n`;
              });
              
              issueBody += `*This issue was automatically created by the GitHub Actions workflow.*`;
              
              // Create the issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['executive-order', 'notification']
              });
              
              console.log(`Created issue for ${newEoCount} new executive orders`);
            } catch (error) {
              console.error('Error creating issue:', error);
              core.setFailed(`Failed to create issue: ${error.message}`);
            }
      
      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if there are any changes to commit
          git add public/executive_orders_summarized.csv
          git diff --quiet && git diff --staged --quiet || git commit -m "Update executive orders summaries [skip ci]"
      
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.PAT }}
          branch: ${{ github.ref }}